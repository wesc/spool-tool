#!/usr/bin/env python3

import os
import sys
import time
import logging
import logging.handlers
import argparse


logger = logging.getLogger("log_spooler")


class LogSpoolerError(Exception):
    pass


class UTCFormatter(logging.Formatter):
    converter = time.gmtime


def main(args):
    logger.info("running %s", vars(args))

    if not os.path.isdir(args.output_dir):
        raise LogSpoolerError("output director does not exist: %s" % args.output_dir)

    interval_unit = args.interval[-1].upper()
    if interval_unit not in ['S', 'M', 'H']:
        raise LogSpoolerError("interval unit must be 'm', 's', or 'h'")
    try:
        interval = int(args.interval[:-1])
    except ValueError:
        raise LogSpoolerError("interval must be integer")

    output = logging.getLogger("output")
    output.setLevel(logging.INFO)
    ch = logging.handlers.TimedRotatingFileHandler(
        os.path.join(args.output_dir, args.output_filename),
        when=interval_unit,
        interval=interval,
        utc=True,
    )
    ch.setFormatter(
        UTCFormatter("%(asctime)s - %(message)s", datefmt="%Y-%m-%dT%H:%M:%S%z")
    )
    output.addHandler(ch)

    for line in sys.stdin:
        line = line.strip()
        output.info(line)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Take stdin and output rotated log files"
    )
    parser.add_argument(
        "--output-dir", help="output directory", type=str, required=True
    )
    parser.add_argument(
        "--output-filename", help="output filename", type=str, required=True
    )
    # FIXME: allow both min and seconds
    parser.add_argument(
        "--interval",
        help="rotate interval (ex. 5s for five seconds, 10m for 10 minutes)",
        type=str,
        required=True,
    )
    parser.add_argument("--loglevel", help="log level", type=str, default="INFO")
    args = parser.parse_args()

    logger = logging.getLogger("log_spooler")
    logger.setLevel(args.loglevel.upper())
    ch = logging.StreamHandler()
    ch.setFormatter(
        logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    )
    logger.addHandler(ch)

    main(args)
